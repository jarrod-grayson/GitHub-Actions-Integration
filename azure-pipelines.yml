# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- main

pool:
  name: Default

stages:
- stage: Build
  displayName: Build
  jobs:
    - job: Build
      pool:
        name: Default
      steps:
      - script: echo Compile
        displayName: 'Preparation [GIT]'
      #- task: VSBuild@1
      #  inputs:
      #    solution: '$(solution)'
      #    msbuildArgs: >-
      #      /p:DeployOnBuild=true /p:WebPublishMethod=Package 
      #      /p:PackageAsSingleFile=true /p:SkipInvalidConfigurations=true 
      #      /p:PackageLocation="$(build.artifactStagingDirectory)"
      #    platform: '$(buildPlatform)'
      #    configuration: '$(buildConfiguration)'

      #- task: VSTest@2
      #  inputs:
      #    platform: '$(buildPlatform)'
      #    configuration: '$(buildConfiguration)'

      #- task: CopyFiles@2
      #  inputs:
      #    SourceFolder: '$(build.sourcesdirectory)/PartsUnlimited-aspnet45/env/'
      #    Contents: '**/*.json'
      #    TargetFolder: '$(Build.ArtifactStagingDirectory)'

      #- task: PublishPipelineArtifact@1
      #  inputs:
      #    targetPath: '$(Build.ArtifactStagingDirectory)'
      #    artifact: 'drop'
      #    publishLocation: 'pipeline'  

      - script: echo Build Sample App
        displayName: 'Build [MAVEN]'

      - script: echo Unit Testing
        displayName: 'Code Analysis [SONAR]'

- stage: Deploy App
  displayName: Deploy App
  jobs:
    - job: Deploy_App
      pool:
        name: Default
      steps:
      - script: echo Environment
        displayName: 'Deployment [DOCKER]'

      - script: echo Application Deployment
        displayName: 'Staging'

- stage: Test
  displayName: Test
  jobs:
    - job: Test
      pool:
        name: Default
      steps:
      - script: echo Test
        displayName: 'Prepare Testing'

      - task: CmdLine@1
        inputs:
          filename: '"C:\Program Files (x86)\TRICENTIS\Tosca Testsuite\ToscaCommander\ToscaCI\Client\ToscaCIClient.exe"'
          arguments: '-m local -c "C:\Tricentis\Automation\ToscaCI\ConfigAPI.xml" -t junit - r "C:\Tosca_Projects\ToscaCIResults\Results.xml"''     '
        displayName: 'Run Tosca API Tests'

      - task: PowerShell@2
        inputs:
          filePath: "$(System.DefaultWorkingDirectory)/UploadToscaResultsToQtest.ps1"
        displayName: 'Upload Tosca API Automation Results to qTest'

      - task: PowerShell@2
        inputs:
          targetType: 'inline'
          script: 'mvn test'
        displayName: 'Run Cucumber Integration Tests'

      - task: PowerShell@2
        inputs:
          filePath: "$(System.DefaultWorkingDirectory)/UploadCucumberResultsToQtest.ps1"
        displayName: 'Upload Cucumber Integration Automation Results to qTest'

      - task: CmdLine@1
        inputs:
          filename: '"C:\Program Files (x86)\TRICENTIS\Tosca Testsuite\ToscaCommander\ToscaCI\Client\ToscaCIClient.exe"'
          arguments: '-m local -c "C:\Tricentis\Automation\ToscaCI\ConfigRegression.xml" -t junit - r "C:\Tosca_Projects\ToscaCIResults\Results.xml"''     '
        displayName: 'Run Tosca Functional Regression Tests'

      - task: PowerShell@2
        inputs:
          filePath: "$(System.DefaultWorkingDirectory)/UploadToscaResultsToQtest.ps1"
        displayName: 'Upload Tosca Functional Regression Automation Results to qTest'

      - task: CmdLine@1
        inputs:
          filename: '"C:\Tricentis\NeoLoad\NeoLoad 7.10\bin\NeoLoadCmd.exe"'
          arguments: '-project "C:\Tricentis\NeoLoad\NeoLoad Projects\Vehicle_Insurance_Application\Vehicle_Insurance_Application.nlp" -launch scenario_1 -noGUI''     '
        displayName: 'Run NeoLoad Performance Tests'

- stage: Deploy to Staging
  displayName: Deploy to Staging
  jobs:
    - job: Deploy_to_Staging
      pool:
        name: Default
      steps:
      - script: echo Publish Artifacts
        displayName: 'Publish Artifact drop'